# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

stages:
- stage: build
  jobs:
  - job: build
    displayName: build
    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      buildParameters.RestoreBuildProjects: '**/*.csproj'
      buildParameters.TestProjects: '**/*UnitTests/*.csproj'

    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(buildParameters.RestoreBuildProjects)

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(buildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration)

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        publishTestResults: true
        projects: $(buildParameters.TestProjects)
        arguments: --configuration $(BuildConfiguration) -p:CollectCoverage=true -p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\XUnit\Coverage\ -p:CoverletOutputFormat=cobertura%2copencover "--collect:\"XPlat Code Coverage\""

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        projects: $(buildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration) --output $(build.ArtifactStagingDirectory)
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        pathtoPublish: $(build.ArtifactStagingDirectory)
        targetPath: 'drop'


- stage: deploy_to_prod
  dependsOn: Build
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - job: deployToAppService
      displayName: 'DeployToAppService - Prod'
      variables:
      - group: infosafeReceiver-variable-group
      steps:
      
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.DefaultWorkingDirectory)'
      
      - task: FileTransform@1
        inputs:
          folderPath: '$(System.DefaultWorkingDirectory)/**/*.zip'
          fileType: 'json'
          targetFiles: '**/appsettings.Production.json'
      
      - task: AzureWebApp@1
        inputs:
          azureSubscription: 'Personal-Sub(57f4859b-8037-4106-ac17-61520b9de19b)'
          appType: 'webApp'
          appName: 'InfoSafeReceiverApi'
          package: '$(System.DefaultWorkingDirectory)/**/*.zip'
          appSettings: '-ASPNETCORE_ENVIRONMENT "Production"'
          deploymentMethod: 'auto'
      
      # - task: AzureCLI@2
      #   inputs:
      #     azureSubscription: 'Personal-Sub(57f4859b-8037-4106-ac17-61520b9de19b)'
      #     scriptType: 'pscore'
      #     scriptLocation: 'inlineScript'
      #     inlineScript: |
      #       # API Management service-specific details
      #       $APIMServiceName="InfoSafeApim"
      #       $ResourceGroupName="infosafe-rg"
      #       $DisplayName="InfoSafeReceiver API"
      #       $ServiceURL="https://infosafereceiverapi.azurewebsites.net"
            
      #       # API-specific details
      #       $APIId="InfoSafeReceiverApi"
      #       $APIPath="infosafereceiver"
      #       $SpecificationFormat="OpenAPI"
      #       $SpecificationURL="https://infosafereceiverapi.azurewebsites.net/swagger/v1/swagger.json"
            
      #       # Import API
      #       az apim api import --path $APIPath --resource-group $ResourceGroupName `
      #           --service-name $APIMServiceName --api-id $APIId `
      #           --display-name $DisplayName --service-url $ServiceURL `
      #           --specification-format $SpecificationFormat --specification-url $SpecificationURL
